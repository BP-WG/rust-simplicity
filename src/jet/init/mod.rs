// Rust Simplicity Library
// Written in 2022 by
//   Christian Lewe <clewe@blockstream.com>
//
// To the extent possible under law, the author(s) have dedicated all
// copyright and related and neighboring rights to this software to
// the public domain worldwide. This software is distributed without
// any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication
// along with this software.
// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
//

//! # Jet initialization
//!
//! Automatically generated by Haskell code.

#[cfg(feature = "bitcoin")]
pub mod bitcoin;
pub mod core;
#[cfg(feature = "elements")]
pub mod elements;

#[cfg(feature = "elements")]
pub(crate) mod encode_elements {
    use std::io::Write;

    use crate::{bititer::BitIter, bitwriter::BitWriter, Error};

    use super::elements::Elements;

    impl Elements {
        pub(crate) fn encode_manual<W: Write>(
            &self,
            w: &mut BitWriter<W>,
        ) -> std::io::Result<usize> {
            let (n, len) = match self {
                Elements::Version => (0, 7),
                Elements::LockTime => (1, 7),
                Elements::InputIsPegin => (1, 6),
                Elements::InputPrevOutpoint => (2, 6),
                Elements::InputAsset => (3, 6),
                Elements::InputAmount => (2, 7),
                Elements::InputScriptHash => (3, 7),
                Elements::InputSequence => (5, 6),
                Elements::InputIssuanceBlinding => (6, 6),
                Elements::InputIssuanceContract => (7, 6),
                Elements::InputIssuanceEntropy => (4, 7),
                Elements::InputIssuanceAssetAmount => (5, 7),
                Elements::InputIssuanceTokenAmount => (9, 6),
                Elements::OutputAsset => (10, 6),
                Elements::OutputAmount => (11, 6),
                Elements::OutputNonce => (6, 7),
                Elements::OutputScriptHash => (7, 7),
                Elements::OutputNullDatum => (13, 6),
                Elements::ScriptCmr => (14, 6),
                Elements::CurrentIndex => (15, 6),
                Elements::CurrentIsPegin => (16, 6),
                Elements::CurrentPrevOutpoint => (17, 6),
                Elements::CurrentAsset => (18, 6),
                Elements::CurrentAmount => (19, 6),
                Elements::CurrentScriptHash => (20, 6),
                Elements::CurrentSequence => (21, 6),
                Elements::CurrentIssuanceBlinding => (22, 6),
                Elements::CurrentIssuanceContract => (23, 6),
                Elements::CurrentIssuanceEntropy => (24, 6),
                Elements::CurrentIssuanceAssetAmount => (25, 6),
                Elements::CurrentIssuanceTokenAmount => (26, 6),
                Elements::InputsHash => (27, 6),
                Elements::OutputsHash => (28, 6),
                Elements::NumInputs => (29, 6),
                Elements::NumOutputs => (30, 6),
                Elements::Fee => (31, 6),
                Elements::Add32 => (16, 5),
                Elements::FullAdd32 => (20, 5),
                Elements::Sub32 => (17, 5),
                Elements::FullSub32 => (21, 5),
                Elements::Mul32 => (9, 4),
                Elements::FullMul32 => (11, 4),
                Elements::Eq32Verify => (116, 7),
                Elements::Eq256Verify => (113, 7),
                Elements::Lt32Verify => (115, 7),
                Elements::Sha256 => (114, 7),
                Elements::Sha256Block => (6, 3),
                Elements::Bip0340Verify => (112, 7),
            };

            w.write_bits_be(n, len)
        }

        pub(crate) fn decode_manual<I: Iterator<Item = u8>>(
            bits: &mut BitIter<I>,
        ) -> Result<Self, Error> {
            decode_bits!(bits, {
                0 => {
                    0 => {
                        0 => {
                            0 => {
                                0 => {
                                    0 => {
                                        0 => {Elements::Version},
                                        1 => {Elements::LockTime}
                                    },
                                    1 => {Elements::InputIsPegin}
                                },
                                1 => {
                                    0 => {Elements::InputPrevOutpoint},
                                    1 => {Elements::InputAsset}
                                }
                            },
                            1 => {
                                0 => {
                                    0 => {
                                        0 => {Elements::InputAmount},
                                        1 => {Elements::InputScriptHash}
                                    },
                                    1 => {Elements::InputSequence}
                                },
                                1 => {
                                    0 => {Elements::InputIssuanceBlinding},
                                    1 => {Elements::InputIssuanceContract}
                                }
                            }
                        },
                        1 => {
                            0 => {
                                0 => {
                                    0 => {
                                        0 => {Elements::InputIssuanceEntropy},
                                        1 => {Elements::InputIssuanceAssetAmount}
                                    },
                                    1 => {Elements::InputIssuanceTokenAmount}
                                },
                                1 => {
                                    0 => {Elements::OutputAsset},
                                    1 => {Elements::OutputAmount}
                                }
                            },
                            1 => {
                                0 => {
                                    0 => {
                                        0 => {Elements::OutputNonce},
                                        1 => {Elements::OutputScriptHash}
                                    },
                                    1 => {Elements::OutputNullDatum}
                                },
                                1 => {
                                    0 => {Elements::ScriptCmr},
                                    1 => {Elements::CurrentIndex}
                                }
                            }
                        }
                    },
                    1 => {
                        0 => {
                            0 => {
                                0 => {
                                    0 => {Elements::CurrentIsPegin},
                                    1 => {Elements::CurrentPrevOutpoint}
                                },
                                1 => {
                                    0 => {Elements::CurrentAsset},
                                    1 => {Elements::CurrentAmount}
                                }
                            },
                            1 => {
                                0 => {
                                    0 => {Elements::CurrentScriptHash},
                                    1 => {Elements::CurrentSequence}
                                },
                                1 => {
                                    0 => {Elements::CurrentIssuanceBlinding},
                                    1 => {Elements::CurrentIssuanceContract}
                                }
                            }
                        },
                        1 => {
                            0 => {
                                0 => {
                                    0 => {Elements::CurrentIssuanceEntropy},
                                    1 => {Elements::CurrentIssuanceAssetAmount}
                                },
                                1 => {
                                    0 => {Elements::CurrentIssuanceTokenAmount},
                                    1 => {Elements::InputsHash}
                                }
                            },
                            1 => {
                                0 => {
                                    0 => {Elements::OutputsHash},
                                    1 => {Elements::NumInputs}
                                },
                                1 => {
                                    0 => {Elements::NumOutputs},
                                    1 => {Elements::Fee}
                                }
                            }
                        }
                    }
                },
                1 => {
                    0 => {
                        0 => {
                            0 => {
                                0 => {Elements::Add32},
                                1 => {Elements::Sub32}
                            },
                            1 => {Elements::Mul32}
                        },
                        1 => {
                            0 => {
                                0 => {Elements::FullAdd32},
                                1 => {Elements::FullSub32}
                            },
                            1 => {Elements::FullMul32}
                        }
                    },
                    1 => {
                        0 => {Elements::Sha256Block},
                        1 => {
                            0 => {
                                0 => {
                                    0 => {
                                        0 => {Elements::Bip0340Verify},
                                        1 => {Elements::Eq256Verify}
                                    },
                                    1 => {
                                        0 => {Elements::Sha256},
                                        1 => {Elements::Lt32Verify}
                                    }
                                },
                                1 => {
                                    0 => {
                                        0 => {Elements::Eq32Verify},
                                        1 => {}
                                    },
                                    1 => {}
                                }
                            },
                            1 => {}
                        }
                    }
                }
            })
        }
    }
}

#[cfg(feature = "bitcoin")]
pub(crate) mod encode_bitcoin {
    use std::io::Write;

    use crate::{bititer::BitIter, bitwriter::BitWriter, jet::Bitcoin, Error};

    impl Bitcoin {
        pub(crate) fn encode_manual<W: Write>(
            &self,
            w: &mut BitWriter<W>,
        ) -> std::io::Result<usize> {
            let (n, len) = match self {
                Bitcoin::Version => (0, 6),
                Bitcoin::LockTime => (1, 6),
                Bitcoin::InputsHash => unimplemented!("Undefined jet encoding"),
                Bitcoin::OutputsHash => (2, 5),
                Bitcoin::NumInputs => (3, 5),
                Bitcoin::TotalInputValue => (4, 5),
                Bitcoin::CurrentPrevOutpoint => (5, 5),
                Bitcoin::CurrentValue => (6, 5),
                Bitcoin::CurrentSequence => (7, 5),
                Bitcoin::CurrentIndex => (16, 6),
                Bitcoin::InputPrevOutpoint => (17, 6),
                Bitcoin::InputValue => (9, 5),
                Bitcoin::InputSequence => (10, 5),
                Bitcoin::NumOutputs => (11, 5),
                Bitcoin::TotalOutputValue => (12, 5),
                Bitcoin::OutputValue => (13, 5),
                Bitcoin::OutputScriptHash => (14, 5),
                Bitcoin::ScriptCMR => (15, 5),
                Bitcoin::SighashAll => (1, 5),
                Bitcoin::Add32 => (16, 5),
                Bitcoin::FullAdd32 => (20, 5),
                Bitcoin::Sub32 => (17, 5),
                Bitcoin::FullSub32 => (21, 5),
                Bitcoin::Mul32 => (9, 4),
                Bitcoin::FullMul32 => (11, 4),
                Bitcoin::Eq32Verify => (116, 7),
                Bitcoin::Eq256Verify => (113, 7),
                Bitcoin::Lt32Verify => (115, 7),
                Bitcoin::Sha256 => (114, 7),
                Bitcoin::Sha256Block => (6, 3),
                Bitcoin::Bip0340Verify => (112, 7),
            };

            w.write_bits_be(n, len)
        }

        pub(crate) fn decode_manual<I: Iterator<Item = u8>>(
            bits: &mut BitIter<I>,
        ) -> Result<Self, Error> {
            decode_bits!(bits, {
                0 => {
                    0 => {
                        0 => {
                            0 => {
                                0 => {
                                    0 => {Bitcoin::Version},
                                    1 => {Bitcoin::LockTime}
                                },
                                1 => {Bitcoin::SighashAll}
                            },
                            1 => {
                                0 => {Bitcoin::OutputsHash},
                                1 => {Bitcoin::NumInputs}
                            }
                        },
                        1 => {
                            0 => {
                                0 => {Bitcoin::TotalInputValue},
                                1 => {Bitcoin::CurrentPrevOutpoint}
                            },
                            1 => {
                                0 => {Bitcoin::CurrentValue},
                                1 => {Bitcoin::CurrentSequence}
                            }
                        }
                    },
                    1 => {
                        0 => {
                            0 => {
                                0 => {
                                    0 => {Bitcoin::CurrentIndex},
                                    1 => {Bitcoin::InputPrevOutpoint}
                                },
                                1 => {Bitcoin::InputValue}
                            },
                            1 => {
                                0 => {Bitcoin::InputSequence},
                                1 => {Bitcoin::NumOutputs}
                            }
                        },
                        1 => {
                            0 => {
                                0 => {Bitcoin::TotalOutputValue},
                                1 => {Bitcoin::OutputValue}
                            },
                            1 => {
                                0 => {Bitcoin::OutputScriptHash},
                                1 => {Bitcoin::ScriptCMR}
                            }
                        }
                    }
                },
                1 => {
                    0 => {
                        0 => {
                            0 => {
                                0 => {Bitcoin::Add32},
                                1 => {Bitcoin::Sub32}
                            },
                            1 => {Bitcoin::Mul32}
                        },
                        1 => {
                            0 => {
                                0 => {Bitcoin::FullAdd32},
                                1 => {Bitcoin::FullSub32}
                            },
                            1 => {Bitcoin::FullMul32}
                        }
                    },
                    1 => {
                        0 => {Bitcoin::Sha256Block},
                        1 => {
                            0 => {
                                0 => {
                                    0 => {
                                        0 => {Bitcoin::Bip0340Verify},
                                        1 => {Bitcoin::Eq256Verify}
                                    },
                                    1 => {
                                        0 => {Bitcoin::Sha256},
                                        1 => {Bitcoin::Lt32Verify}
                                    }
                                },
                                1 => {
                                    0 => {
                                        0 => {Bitcoin::Eq32Verify},
                                        1 => {}
                                    },
                                    1 => {}
                                }
                            },
                            1 => {}
                        }
                    }
                }
            })
        }
    }
}

pub(crate) mod encode_core {
    use std::io::Write;

    use crate::{bititer::BitIter, bitwriter::BitWriter, jet::Core, Error};

    impl Core {
        pub(crate) fn encode_manual<W: Write>(
            &self,
            w: &mut BitWriter<W>,
        ) -> std::io::Result<usize> {
            let (n, len) = match self {
                Core::Add32 => (16, 5),
                Core::FullAdd32 => (20, 5),
                Core::Sub32 => (17, 5),
                Core::FullSub32 => (21, 5),
                Core::Mul32 => (9, 4),
                Core::FullMul32 => (11, 4),
                Core::Eq32Verify => (116, 7),
                Core::Eq256Verify => (113, 7),
                Core::Lt32Verify => (115, 7),
                Core::Sha256 => (114, 7),
                Core::Sha256Block => (6, 3),
                Core::Bip0340Verify => (112, 7),
            };

            w.write_bits_be(n, len)
        }

        pub(crate) fn decode_manual<I: Iterator<Item = u8>>(
            bits: &mut BitIter<I>,
        ) -> Result<Self, Error> {
            decode_bits!(bits, {
                0 => {},
                1 => {
                    0 => {
                        0 => {
                            0 => {
                                0 => {Core::Add32},
                                1 => {Core::Sub32}
                            },
                            1 => {Core::Mul32}
                        },
                        1 => {
                            0 => {
                                0 => {Core::FullAdd32},
                                1 => {Core::FullSub32}
                            },
                            1 => {Core::FullMul32}
                        }
                    },
                    1 => {
                        0 => {Core::Sha256Block},
                        1 => {
                            0 => {
                                0 => {
                                    0 => {
                                        0 => {Core::Bip0340Verify},
                                        1 => {Core::Eq256Verify}
                                    },
                                    1 => {
                                        0 => {Core::Sha256},
                                        1 => {Core::Lt32Verify}
                                    }
                                },
                                1 => {
                                    0 => {
                                        0 => {Core::Eq32Verify},
                                        1 => {}
                                    },
                                    1 => {}
                                }
                            },
                            1 => {}
                        }
                    }
                }
            })
        }
    }
}
